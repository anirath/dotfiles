###################################
# Bash Functions -- ~/.bash_funcs #
# ------------------------------- #
# author   : anirath              #
# created  : 2020.05.06           #
# modified : 2020.05.07           #
# ------------------------------- #
#          anirath@pm.me          #
###################################
# -------------------------------------------------------
# Sourced by '~/.bashrc' to declare any common functions.
# -------------------------------------------------------
# ==========
# PS1 Prompt
# ==========
# ---
# CWD
# ---
function prompt_fn_cwd () {
    # Assign the PWD to a variable.
    working_dir=$(pwd)
    # Check CWD permissions.
    if [ -w $working_dir ]; then
        # If writable then set green text.
        working_dir="${txt_fg_green}>>${txt_fg_blue} ${working_dir}"
    else
        # If not writable then set red text.
        working_dir="${txt_fg_red}>>${txt_fg_blue} ${working_dir}"
    fi
    # Return the CWD styled accordingly.
    echo "$working_dir"
}

# prompt_fn_err() -- returns the current error code for use with the prompt.
function prompt_fn_err () {
    # Assign the last returned value to a variable.
	err_code=$?
	if [ $err_code -ne 0 ]; then
        # If an error code was returned then format and return the error information for prompt.
        echo "[${txt_fg_red}Code:${txt_bold}${err_code}${txt_reset}] "
    else
        # If no error was returned then just return nothing.
        echo ""
	fi
}

# prompt_fn_git_status() -- returns git information for the prompt.
function prompt_fn_git_status () {
    # Use 'git status' piped with 'tee' to check status, then pipe output through 'grep'.
	status=$(git status 2>&1 | tee)
	dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
	untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
	ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
	newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
	renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
	deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
	bits=''
    # Check function's variables to determine git status, and return the corresponding info via '$bits'.
	if [ "${renamed}" == "0" ]; then
		bits=" ${txt_fg_magenta}${txt_bold}<>${txt_uline_on}files-renamed${txt_uline_off}<>${txt_reset}${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits=" ${txt_fg_yellow}${txt_bold}**${txt_uline_on}branch-ahead${txt_uline_off}**${txt_reset}${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits=" ${txt_fg_blue}${txt_bold}++${txt_uline_on}files-new${txt_uline_off}++${txt_reset}${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits=" ${txt_fg_cyan}${txt_bold}??${txt_uline_on}files-untracked${txt_uline_off}??${txt_reset}${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits=" ${txt_bg_black}${txt_fg_yellow}${txt_bold}Xx${txt_uline_on}files-deleted${txt_uline_off}xX${txt_reset}${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits=" ${txt_fg_red}${txt_bold}!!${txt_uline_on}dirty${txt_uline_off}!!${txt_reset}${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
	    # If any bits exist in '$bits' then return the bits as parsed output.
		echo "${bits}${txt_reset}"
	else
	    # If no bits were added then just return nothing for git status.
		return 0
	fi
}

# prompt_fn_git_branch() -- checks if CWD is a git repository for the prompt.
function prompt_fn_git_branch () {
    # Use 'git' commands piped through 'sed' to determine the git branch.
	branch=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${branch}" == "" ]; then
	    # If there is a 'git' branch then use 'prompt_fn_git_status()' to return the status for prompt.
		git_status=$(prompt_fn_git_status)
		echo ":: ${txt_fg_green}${txt_bold}git:${txt_uline_on}${branch}${txt_reset}${git_status}"
	else
	    # If the CWD isn't a valid git repository then just return nothing.
		return 0
	fi
}
